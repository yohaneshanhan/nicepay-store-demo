<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use App\Library\Nicepay\NicepayLib;

class CheckoutController extends Controller
{

    public function requestCheckout(Request $request)
    {

        $nicepay = new NicepayLib();

        function generateReference()
        {
            $micro_date = microtime();
            $date_array = explode(" ", $micro_date);
            $date = date("YmdHis", $date_array[1]);
            $date_array[0] = preg_replace('/[^\p{L}\p{N}\s]/u', '', $date_array[0]);
            return "Ref" . $date . $date_array[0] . rand(100, 999);
        }

        function billingCategory($nicepay, $request)
        {
            // Billing Category
            $nicepay->set('billingNm', $request->input('billingName')); // Customer name
            $nicepay->set('billingPhone', $request->input('billingPhone')); // Customer phone number
            $nicepay->set('billingEmail', in_array("billingEmail", $request->input('billing')) ? 'john@example.com' : ''); // Customer Email
            $nicepay->set('billingAddr', in_array("billingAddr", $request->input('billing')) ? 'Jl. Jend. Sudirman No. 28' : '');
            $nicepay->set('billingCity', in_array("billingCity", $request->input('billing')) ? 'Jakarta Selatan' : '');
            $nicepay->set('billingState', in_array("billingState", $request->input('billing')) ? 'DKI Jakarta' : '');
            $nicepay->set('billingPostCd', in_array("billingPostCd", $request->input('billing')) ? '12870' : '');
            $nicepay->set('billingCountry', in_array("billingCountry", $request->input('billing')) ? 'Indonesia' : '');
        }

        $payMethod = $request->input('payMethod');
        $referenceNo = $request->input('referenceNo');
        Log::info('requestCheckout. Start PayMethod: ' . $payMethod . ' and Reference No : ' . $referenceNo);
        
        if (isset($payMethod)) {
            Log::info('requestCheckout. Populate Data');
            // Populate Mandatory parameters to send
            $nicepay->set('payMethod', '02');
            $nicepay->set('currency', 'IDR');

            if (!isset($referenceNo) || $referenceNo == null) {
                $nicepay->set('referenceNo', generateReference()); // Invoice Number or Reference Number Generated by merchant
            } else {
                $nicepay->set('referenceNo', $referenceNo);
            }

            $nicepay->set('env', $request->input('env'));
            $nicepay->set('apiVersion', $request->input('apiVersion'));

            $nicepay->set('amt', $request->input('amt')); // Total gross amount
            $nicepay->set('description', 'Payment of Invoice No ' . $nicepay->get('referenceNo')); // Transaction description

            $nicepay->set('bankCd', $request->input('code'));

            billingCategory($nicepay, $request);

            // Log::info('requestCheckout. billing check : ' . $nicepay->get('billingNm'));

            // Delivery Category
            $nicepay->set('deliveryNm', 'John Doe'); // Delivery name
            $nicepay->set('deliveryPhone', '02112345678');
            $nicepay->set('deliveryAddr', 'Jl. Jend. Sudirman No. 28');
            $nicepay->set('deliveryCity', 'Jakarta Pusat');
            $nicepay->set('deliveryState', 'DKI Jakarta');
            $nicepay->set('deliveryPostCd', '10210');
            $nicepay->set('deliveryCountry', 'Indonesia');

            $timeStampRegist = date('Ymd') . date('His');
            $nicepay->set('timeStamp', $timeStampRegist);
            // Send Data
            Log::info('requestCheckout. Request API');
            $responseApi = $nicepay->requestVA();
            Log::info('requestCheckout. Response API');

            // Response from NICEPAY
            if (isset($responseApi->resultCd) && $responseApi->resultCd == "0000") {
                Log::info('requestCheckout. Response API  Success');
                // session(['payMethod' => '02']);
                // return redirect()->away($response->data->requestURL . "?tXid=" . $response->tXid);
                return response()->json([$responseApi]);
            } elseif (isset($responseApi->resultCd)) {
                $msg = $responseApi->resultCd . " : " . $responseApi->resultMsg;
                Log::error('requestCheckout. Response Error : ' . $msg);
                return response()->json([
                    $responseApi
                ]);
            }else if (isset($responseApi->data->resultCd) && $responseApi->data->resultCd == "0000"){
                Log::info('requestCheckout. Response API V1 Professional');
                // header("Location: ".$responseApi->data->requestURL."?tXid=".$responseApi->tXid);
                // return redirect()->away($responseApi->data->requestURL ."?tXid=" . $responseApi->tXid);
                return response()->json([
                    $responseApi
                ]);
            }else {
                Log::error('requestCheckout. Response Error. Connection Timeout. Please Try Again!');
                $request->session()->flash('msg', 'Connection Timeout. Please Try Again!');
                return redirect()->route('otherError');
            }
        } // Unknown Pay Method
        else {
            Log::error('requestCheckout. Response Error Please Set Amount, ReferenceNo and tXid.');
            $responseOtherError = ['msg', 'Please Set Amount, ReferenceNo and tXid.'];
            // $request->session()->flash('msg', 'Please Set Amount, ReferenceNo and tXid.');
            // return redirect()->route('otherError');

            return response()->json([$responseOtherError]);
        }

        return response()->json($this->response);
    }
}
